<!doctype html>
<html>

<head>
	<title>Network</title>

	<style type="text/css">
		body {
			background: #000;
			color: #eee;
			margin: 0;
		}

		#loadingBar {
			position: absolute;
			top: 10vh;
			left: 0px;
			width: 100%;
			height: 90vh;
			background-color: rgba(200, 200, 200, 0.8);
			-webkit-transition: all 0.5s ease;
			-moz-transition: all 0.5s ease;
			-ms-transition: all 0.5s ease;
			-o-transition: all 0.5s ease;
			transition: all 0.5s ease;
			opacity: 1;
		}

		#wrapper {
			position: relative;
			width: 900px;
			height: 900px;
		}

		#text {
			position: absolute;
			top: 8px;
			left: 530px;
			width: 30px;
			height: 50px;
			margin: auto auto auto auto;
			font-size: 22px;
			color: #000000;
		}

		#popup {
			background-color: #fff;
			z-index: 99;
			position: absolute;
			display: none;
			color: #000;
			padding: 10px;
			border-radius: 5px;
			right: 5px;
			top: 10vh;
			animation-name: fadein;
  			animation-duration: 1s;
			border: 0px solid orange;
			border-right: 0;
		}
		
		@keyframes fadein {
		  0%   {background-color: #fff; border-color: #fff; }
		  50%  {background-color: orange; border: 10px solid orange; border-right: 0; border-top: 0;}
		  100% {background-color: #fff; border-color: #fff;}
		}

		div.outerBorder {
			position: relative;
			top: 400px;
			width: 600px;
			height: 44px;
			margin: auto auto auto auto;
			border: 8px solid rgba(0, 0, 0, 0.1);
			background: rgb(252, 252, 252);
			/* Old browsers */
			background: -moz-linear-gradient(top, rgba(252, 252, 252, 1) 0%, rgba(237, 237, 237, 1) 100%);
			/* FF3.6+ */
			background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, rgba(252, 252, 252, 1)), color-stop(100%, rgba(237, 237, 237, 1)));
			/* Chrome,Safari4+ */
			background: -webkit-linear-gradient(top, rgba(252, 252, 252, 1) 0%, rgba(237, 237, 237, 1) 100%);
			/* Chrome10+,Safari5.1+ */
			background: -o-linear-gradient(top, rgba(252, 252, 252, 1) 0%, rgba(237, 237, 237, 1) 100%);
			/* Opera 11.10+ */
			background: -ms-linear-gradient(top, rgba(252, 252, 252, 1) 0%, rgba(237, 237, 237, 1) 100%);
			/* IE10+ */
			background: linear-gradient(to bottom, rgba(252, 252, 252, 1) 0%, rgba(237, 237, 237, 1) 100%);
			/* W3C */
			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fcfcfc', endColorstr='#ededed', GradientType=0);
			/* IE6-9 */
			border-radius: 72px;
			box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
		}

		#border {
			position: absolute;
			top: 10px;
			left: 10px;
			width: 500px;
			height: 23px;
			margin: auto auto auto auto;
			box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.2);
			border-radius: 10px;
		}

		#bar {
			position: absolute;
			top: 0px;
			left: 0px;
			width: 20px;
			height: 20px;
			margin: auto auto auto auto;
			border-radius: 11px;
			border: 2px solid rgba(30, 30, 30, 0.05);
			background: rgb(0, 173, 246);
			/* Old browsers */
			box-shadow: 2px 0px 4px rgba(0, 0, 0, 0.4);
		}

		#view_node {
			margin-top: 5px;
			max-width: 25vh;
		}

		#network {
			height: 90vh;
			border: 0;
			margin: 0;
			padding: 0;
		}

		p {
			height: 8vh;
			margin: 0;
			padding: 0;
		}

		.left {
			float: left;
			width: 30vw;
		}

		.right {
			float: right;
		}

		header {
			margin: 0;
			padding: 0;
			padding: 1vh 0 1vh;
		}

		.legend-lb {
			color: #97c2fc;
		}

		.legend-vm {
			color: #20b1a9;
		}

		.legend-db {
			color: #7be141;
		}

		.legend-unknown {
			color: #ffa807;
		}

		.legend-unknown-domain {
			color: #ffff00;
		}

		.legend-uncategorized {
			color: #eb7df4;
		}

		.legend-public {
			color: #ee0000;
		}
	</style>

	<script src="/vis.js"></script>
	<script src="/jquery.js"></script>

	<script type="text/javascript">
		function formatDate(date) {
			var day = date.getDate();
			var month = date.getMonth() + 1;
			var year = date.getFullYear().toString().substring(2);

			return month + '/' + day + '/' + year;
		}

		function formatRange(startDate, endDate) {
			if (startDate.getTime() === 0 || endDate.getTime() === 0) {
				return '';
			}

			const startStr = formatDate(startDate);
			const endStr = formatDate(endDate);
			if (startStr === endStr) {
				return `Date: ${startStr}`;
			}
			return `Dates: ${startStr} - ${endStr}`;
		}

		function draw() {
			var nodes = JSON.parse('<%- JSON.stringify(nodes).replace("\\", "\\\\") %>');
			var edges = JSON.parse('<%- JSON.stringify(edges).replace("\\", "\\\\") %>');

			// create a network
			var container = document.getElementById('network');
			var data = {
				nodes: nodes,
				edges: edges
			};
			var options = {
				nodes: {
					shape: 'dot',
					size: 16,
					"font": { color: "#ffffff" },
				},
				edges: {
					"smooth": {
						"type": "continuous",
						"forceDirection": "none"
					},
					"font": { color: "#ffffff" },
				},
				groups: {
					public: {
						shape: 'circle',
						color: { background: '#ee0000', border: '#dd0000', highlight: { background: '#ff0000', border: '#ee0000' } },
					},
					vm: {
						shape: 'dot',
						color: { background: '#20b1a9', border: '#10a098', highlight: { background: '#31c2ba', border: '#20b1a9' } },
					},
					db: {
						//shape: 'database',
						shape: 'icon',
         				icon: {
        			      face: 'FontAwesome',
        			      code: '\u25c9',
        			      size: 50,
        			      color: '#7be141'
        		    	},
						color: { background: '#7be141', border: '#6ad030', highlight: { background: '#8cf252', border: '#7be141' } },
					},
					lb: {
						shape: 'star',
						color: { background: '#97c2fc', border: '#86b1eb', highlight: { background: '#a8d3fd', border: '#97c2fc' } },
					},
					unknown: {
						shape: 'diamond',
						color: { background: '#ffa807', border: '#ee9706', highlight: { background: '#ffb918', border: '#ffa807' } },
					},
					unknown_domain: {
						shape: 'dot',
						color: { background: '#eeee00', border: '#dddd11', highlight: { background: '#ffff00', border: '#eeee00' } },
					},
					uncategorized: {
						shape: 'dot',
						color: { background: '#eb7df4', border: '#da6ce3', highlight: { background: '#fc8ef5', border: '#eb7df4' } },
					}
				},
				physics: {
					forceAtlas2Based: {
						gravitationalConstant: -56,
						centralGravity: 0.003,
						springLength: 230,
						springConstant: 0.18
					},
					maxVelocity: 146,
					solver: 'forceAtlas2Based',
					timestep: 0.35,
					stabilization: {
						//enabled: true,
						iterations: 2000,
						// updateInterval: 99
					}
				},
				interaction: { hover: true },
			};
			var network = new vis.Network(container, data, options);
			var idToNode = <%- JSON.stringify(idToNode) %>;
			var idToEdge = <%- JSON.stringify(idToEdge) %>;

			const formatMetadata = (data) => {
				return Object.keys(data)
					.map((key) => `${key}: ${JSON.stringify(data[key])}`)
					.join('<br />');
			};
			const showPopup = (txt) => {
				$('#popup')
					.css('display', 'block')
					.html(txt);
			};

			network.on("click", function (params) {
				if (params.nodes.length === 1) {
					const node = idToNode[params.nodes[0]];
					const nodeTxt = formatMetadata(node);
					showPopup(nodeTxt);
				}
				else if (params.edges.length === 1) {
					const edge = idToEdge[params.edges[0]];
					const edgeTxt = formatMetadata(edge);
					showPopup(edgeTxt);
				}
				else {
					$('#popup').css('display', 'none');
				}
			});

			network.on("stabilizationProgress", function (params) {
				var maxWidth = 496;
				var minWidth = 20;
				var widthFactor = params.iterations / params.total;
				var width = Math.max(minWidth, maxWidth * widthFactor);

				document.getElementById('bar').style.width = width + 'px';
				document.getElementById('text').innerHTML = Math.round(widthFactor * 100) + '%';
			});
			network.once("stabilizationIterationsDone", function () {
				document.getElementById('text').innerHTML = '100%';
				document.getElementById('bar').style.width = '496px';
				document.getElementById('loadingBar').style.opacity = 0;
				// really clean the dom element
				setTimeout(function () { document.getElementById('loadingBar').style.display = 'none'; }, 500);
			});

			const animationOptions = {
				duration: 600,
				easingFunction: 'easeInOutCubic',
			};

			$('#view_node').html('<option value="">View by Name</option>' +
				'<option value="_">---- Show All ----</option>' +
				'<%- JSON.stringify(nodes.map(n => `<option value="${n.id}">${n.label}</option>`).join("")) %>');

			const startDate = new Date(<%- startDate ? startDate.getTime() : 0 %>);
			const endDate = new Date(<%- endDate ? endDate.getTime() : 0 %>);
			$('#dates').text(formatRange(startDate, endDate));

			$('#view_node').on('change', (e) => {
				var value = $("#view_node option:selected").attr("value");
				if (value === '_') {
					network.fit({ animation: animationOptions });
				}
				else if (value) {
					var nodeId = parseInt(value);
					var options = {
						// position: {x:positionx,y:positiony}, // this is not relevant when focusing on nodes
						scale: 1,
						//offset: { x: offsetx, y: offsety },
						animation: animationOptions,
					};
					network.focus(nodeId, options);
					(new Date()).to
				}

				$('#view_node').val('');
			});


		}
	</script>

</head>

<body onload="draw()">
	<header>
		<p class="left">
			<span id="dates">Dates:</span><br />
			<select id="view_node" autocomplete="off">
				<option value="" selected>View by Name</option>
				<option value="_">Show All</option>
			</select>
		</p>
		<p class="right">
			Legend:
			<span class="legend-public">Public Internet</span>,
			<span class="legend-lb">LB</span>,
			<span class="legend-vm">VM</span>,
			<span class="legend-db">DB</span>,
			<span class="legend-uncategorized">Other (Trusted)</span>,
			<span class="legend-unknown">Unknown</span>,
			<span class="legend-unknown-domain">External Domain</span>
			<br />
			Actions: pan, zoom, drag or click nodes and edges
		</p>
	</header>

	<div id="network"></div>
	<div id="loadingBar">
		<div class="outerBorder">
			<div id="text">0%</div>
			<div id="border">
				<div id="bar"></div>
			</div>
		</div>
	</div>
	<div id="popup">

	</div>
</body>

</html>